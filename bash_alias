#!/bin/bash
# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
User="\u"
Time24h="\t"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"
Host="\h"

alias fbuild="sudo rm -rf /usr/local/lib/*; sudo make distclean; ./autogen.sh && sudo ./configure --enable-gnfs --disable-mempool && sudo make CFLAGS=\"-Wall -DDEBUG -g3 -O0 -fno-omit-frame-pointer\" install -j 32 1>/dev/null"
alias dbuild="sudo rm -rf /usr/local/lib/*; sudo make distclean; ./autogen.sh && sudo ./configure --with-libtirpc && sudo make CFLAGS=\"-Wall -DDEBUG -g3 -O0 -fno-omit-frame-pointer\" install -j 32 1>/dev/null"
alias asanbuild="sudo rm -rf /usr/local/lib/*; sudo make distclean; ./autogen.sh && sudo ./configure --enable-gnfs --disable-mempool && sudo make CFLAGS=\"-Wall -DDEBUG -g3 -O0 -fsanitize=address -fno-omit-frame-pointer -lasan\" install -j 32 1>/dev/null"
alias mbuild="sudo make CFLAGS=\"-DDEBUG -g3 -Wall -O0\" install -j 32 1>/dev/null"
alias gcovbuild="sudo make CFLAGS=\"-DDEBUG -g3 -fprofile-arcs -ftest-coverage -lgcov --coverage\" install -j 32 1>/dev/null"
alias g="git "
alias irb='irb --readline -r irb/completion'
alias cdr='cd ./$(git rev-parse --show-cdup)'

function gitcc {
        a="$1"
        if [ -z "$1" ]; then a="Pranith"; fi
        git log --author="$a" --format="format:%cd" --date=short | cut -f1,2 -d'-' | sort -r | uniq -c | less
}

function up {
        git fetch && git rebase origin/$1
}

function fpid {
        ps aux | grep gluster | grep 'volfile-id=' | awk '{print $2}'
}

function lg {
        ps aux | grep gluster
}

function commits {
        local b="$1"
        if [ -z $b ]; then b="origin/master"; fi
        git log $b --since=`date +%D | awk 'BEGIN {FS=OFS="/"} {$2="01";print $0}'` | awk '/^Author/ {commits[$NF]++} END {for (author in commits) print author, commits[author]}' | sort -nrk2 | column -t
}

function commits_this_year {
        local b="$1"
        if [ -z $b ]; then b="origin/master"; fi
        git log $b --since=`date +%D | awk 'BEGIN {FS=OFS="/"} {$2="01";$1="01";print $0}'` | awk '/^Author/ {commits[$NF]++} END {for (author in commits) print author, commits[author]}' | sort -nrk2 | column -t
}

function commits_year {
        local y="$1"
        local b="$2"
        if [ -z $y ]; then y=`date +%D | awk 'BEGIN {FS=OFS="/"} {print $3}'`; fi
        if [ -z $b ]; then b="origin/master"; fi
        git log $b --since=01/01/$y --until=31/12/$y| awk '/^Author/ {commits[$NF]++} END {for (author in commits) print author, commits[author]}' | sort -nrk2 | column -t
}

function commits_100 {
        local b="$1"
        if [ -z $b ]; then b="origin/master"; fi
        git log $b -100 | awk '/^Author/ {commits[$NF]++} END {for (author in commits) print author, commits[author]}' | sort -nrk2 | column -t
}

function crefi_create {
local m="$1"
if [ -z $m ]; then $m="."; fi
crefi -T 10 -n 10 --multi -d 10 -b 10 --size=10k $m
}

function clang_check {
    git show --pretty="format:" --name-only | grep -v "contrib/" | egrep --color=never "*\.[ch]$" | xargs clang-format -i
}

source /etc/profile.d/autojump.bash
